<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>decorators</title>
    <link href="/2021/07/03/decorators/"/>
    <url>/2021/07/03/decorators/</url>
    
    <content type="html"><![CDATA[<p>装饰器 是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。 装饰器使用 @expression这种形式，expression求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h3><p>如果我们要定制一个修饰器应用到一个声明上，我们得写一个装饰器工厂函数。 装饰器工厂就是一个简单的函数，它返回一个表达式，以供装饰器在运行时调用。</p><p>例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">color</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>) </span>&#123; <span class="hljs-comment">// 这是一个装饰器工厂</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target</span>) </span>&#123; <span class="hljs-comment">//  这是装饰器</span><br>        <span class="hljs-comment">// do something with &quot;target&quot; and &quot;value&quot;...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* obj: 要定义属性的对象。</span><br><span class="hljs-comment">* prop: 要定义或修改的属性的名称或 Symbol 。</span><br><span class="hljs-comment">* descriptor: 要定义或修改的属性描述符。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">Object</span>.defineProperty(obj, prop, descriptor)<br></code></pre></td></tr></table></figure><p>该方法允许精确地添加或修改对象的属性。默认的情况下，使用 Object.defineProperty() 添加的属性值是不可修改(immutable)的。</p><h3 id="数据描述符"><a href="#数据描述符" class="headerlink" title="数据描述符"></a>数据描述符</h3><p>数据描述符是一个具有值的属性，该值可以是可写的，也可以是不可写的。</p><h3 id="存取描述符"><a href="#存取描述符" class="headerlink" title="存取描述符"></a>存取描述符</h3><p>存取描述符是由 getter 函数和setter 函数所描述的属性。</p><h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>Reflect是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。</p><p>将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。现阶段，某些方法同时在 Object和 Reflect 对象上部署，未来的新方法将只部署在 Reflect 对象上。也就是说，从 Reflect 对象上可以拿到语言内部的方法。</p><p>修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc) 则会返回 false。</p><p>让 Object 操作都变成函数行为。某些 Object 操作是命令式，比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name) 和Reflect.deleteProperty(obj, name) 让它们变成了函数行为。</p><p>Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在Reflect 上获取默认行为。</p><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>类装饰器应用于类构造函数，可以用来监视，修改或替换类定义</p><p>接口定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> ClassDecorator = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TFunction</span> <span class="hljs-attr">extends</span> <span class="hljs-attr">Function</span>&gt;</span>(target: TFunction) =&gt; TFunction | void;</span><br><span class="xml">类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数。</span><br></code></pre></td></tr></table></figure><p>首先，写一个最简单的装饰器：</p><p>decorator.ts :</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorld</span>(<span class="hljs-params">target: <span class="hljs-built_in">any</span></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello World!&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;target :&#x27;</span>, target.toString())<br>&#125;<br><br><span class="hljs-meta">@helloWorld</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldClass</span> </span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;jerome&#x27;</span><br>    <br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am constructor.&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am test method.&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行 tsc -p . 编译 ts 文件，生成 js 文件，并用 node 执行这个 js 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/decorator.js</span> <br>hello World!<br>target : function HelloWorldClass() &#123;<br>        this.name = &#x27;jerome&#x27;;<br>        console.log(&#x27;I am constructor.&#x27;);<br>    &#125;<br></code></pre></td></tr></table></figure><p>由此可见，装饰器在运行时就被执行，target 传递的就是 HelloWorldClass 类的构造函数，也印证了装饰器的定义中，它在运行时被调用，被装饰的声明信息作为参数传入。</p><p>接下来，我们解析一下这个 js 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> __decorate = (<span class="hljs-built_in">this</span> &amp;&amp; <span class="hljs-built_in">this</span>.__decorate) || <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">decorators, target, key, desc</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-built_in">arguments</span>.length,<br>        r = c &lt; <span class="hljs-number">3</span> ? target : desc === <span class="hljs-literal">null</span> ? desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(target, key) : desc,<br>        d;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Reflect</span> === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Reflect</span>.decorate === <span class="hljs-string">&quot;function&quot;</span>) r = <span class="hljs-built_in">Reflect</span>.decorate(decorators, target, key, desc);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = decorators.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            <span class="hljs-keyword">if</span> (d = decorators[i]) r = (c &lt; <span class="hljs-number">3</span> ? d(r) : c &gt; <span class="hljs-number">3</span> ? d(target, key, r) : d(target, key)) || r;<br>    <span class="hljs-keyword">return</span> c &gt; <span class="hljs-number">3</span> &amp;&amp; r &amp;&amp; <span class="hljs-built_in">Object</span>.defineProperty(target, key, r), r;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorld</span>(<span class="hljs-params">target</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello World!&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;target :&#x27;</span>, target.toString());<br>&#125;<br><span class="hljs-keyword">var</span> HelloWorldClass = <span class="hljs-comment">/** <span class="hljs-doctag">@class </span>*/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HelloWorldClass</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;jerome&#x27;</span>;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am constructor.&#x27;</span>);<br>    &#125;<br>    HelloWorldClass.prototype.test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am test method.&#x27;</span>);<br>    &#125;;<br>    HelloWorldClass = __decorate([<br>        helloWorld<br>    ], HelloWorldClass);<br>    <span class="hljs-keyword">return</span> HelloWorldClass;<br>&#125;());<br></code></pre></td></tr></table></figure><p>代码太多，让我们分几步来解析：</p><p>@helloWorld 类装饰器解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> __decorate = (<span class="hljs-built_in">this</span> &amp;&amp; <span class="hljs-built_in">this</span>.__decorate) || <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">decorators, target, key, desc</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-built_in">arguments</span>.length,<br>        r = c &lt; <span class="hljs-number">3</span> ? target : desc === <span class="hljs-literal">null</span> ? desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(target, key) : desc,<br>        d;<br>   <span class="hljs-comment">// 如果原生反射可用，使用原生反射触发装饰器</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Reflect</span> === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Reflect</span>.decorate === <span class="hljs-string">&quot;function&quot;</span>) r = <span class="hljs-built_in">Reflect</span>.decorate(decorators, target, key, desc);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-comment">// 自右向左迭代装饰器</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = decorators.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>          <span class="hljs-comment">// 如果装饰器合法，将其赋值给 d</span><br>            <span class="hljs-keyword">if</span> (d = decorators[i]) r = (c &lt; <span class="hljs-number">3</span> ? d(r) : c &gt; <span class="hljs-number">3</span> ? d(target, key, r) : d(target, key)) || r;<br>  <span class="hljs-keyword">return</span> c &gt; <span class="hljs-number">3</span> &amp;&amp; r &amp;&amp; <span class="hljs-built_in">Object</span>.defineProperty(target, key, r), r;<br>&#125;;<br></code></pre></td></tr></table></figure><p>第一行定义了 __decorate 函数，就是通过 @helloWorld 解析出来的，用来处理装饰器的功能。</p><p>这个函数有四个参数，让我们来看看都是些什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * decorators: 数组，包含多个装饰器</span><br><span class="hljs-comment">  * target: 被装饰的类，即 HelloWorldClass 的构造函数</span><br><span class="hljs-comment">  * key: 变量名称</span><br><span class="hljs-comment">  * desc: 属性描述符</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">decorators, target, key, desc</span>) </span>&#123;...&#125;<br></code></pre></td></tr></table></figure><p>c &lt; 3 ? 为什么是 3，c 代表的是传入参数的个数，如果未传入属性描述符，r 都为 target，若传入属性描述符且不为空，则 r 为属性描述符。</p><p>通过对这段 js 的分析之后，可以简化为如下：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> c = <span class="hljs-number">2</span>, r = target, d;<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = decorators.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>   <span class="hljs-keyword">if</span> (d = decorators[i]) r = d(r) || r;<br>   <span class="hljs-keyword">return</span> r;<br></code></pre></td></tr></table></figure><p>当装饰器合法时，将其赋值给 d，r = d(r) || r 相当于把 target 作为参数调用装饰器函数的结果赋值给 r, 如果 d(r) 没有返回值，返回的是原来的类 target，当有返回值的时候，返回的是 d(r) 的 return 内容。</p><p>HelloWorldClass 类</p><p>从打包出的结果来看，类 HelloWorld 被解析成了一个自执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> HelloWorldClass = <span class="hljs-comment">/** <span class="hljs-doctag">@class </span>*/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HelloWorldClass</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;jerome&#x27;</span>;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am constructor.&#x27;</span>);<br>  &#125;<br>  HelloWorldClass.prototype.test = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;I am test method.&#x27;</span>);<br>  &#125;;<br>  HelloWorldClass = __decorate([<br>      helloWorld<br>  ], HelloWorldClass);<br>  <span class="hljs-keyword">return</span> HelloWorldClass;<br>&#125;());<br></code></pre></td></tr></table></figure><p>在自执行函数中，HelloWorldClass 接收 __decorate() 函数的执行结果，相当于改变了构造函数，所以可以利用装饰器修改类的功能。</p><h2 id="带返回值的类装饰器"><a href="#带返回值的类装饰器" class="headerlink" title="带返回值的类装饰器"></a>带返回值的类装饰器</h2><p>上面的例子是没有返回值的装饰器函数，它返回的是原来的类，那么带返回值的装饰器函数是怎么样的呢？是否是被装饰器修改之后的类呢？让我们来一起探究一下：</p><p>按照之前的步骤，这次我们的装饰器要带有返回值，下面是一个 override 构造函数的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">classDecorator</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> </span>&#123;<span class="hljs-keyword">new</span>(...args:any[]):&#123;&#125;&#125;&gt;(<span class="hljs-title">constructor</span>:<span class="hljs-title">T</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">constructor</span> </span>&#123;<br>        newProperty = <span class="hljs-string">&quot;new property&quot;</span>;<br>        hello = <span class="hljs-string">&quot;override&quot;</span>;<br>    &#125;<br>&#125;<br><br>@classDecorator<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>    property = <span class="hljs-string">&quot;property&quot;</span>;<br>    hello: string;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">m: string</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hello = m;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> Greeter(<span class="hljs-string">&quot;world&quot;</span>));<br></code></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/decoratorReturn.js</span> <br>class_1 &#123;<br>property: &#x27;property&#x27;,<br>hello: &#x27;override&#x27;,<br>newProperty: &#x27;new property&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>由代码可知，Greeter 的构造函数是对 hello 的赋值为 world，然而在使用了 @classDecorator 这个构造函数之后，hello 的值变为了 override, 说明了类装饰器应用于类构造函数，可以用来监视，修改或替换类定义。</p><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>属性装饰器声明在一个属性声明之前，属性装饰器表达式会在运行时当作函数被调用，传入下列2个参数：</p><p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象<br>成员的名字。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> PropertyDecorator =<br>  <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyKey: <span class="hljs-built_in">string</span> | symbol</span>) =&gt;</span> <span class="hljs-built_in">void</span>;<br></code></pre></td></tr></table></figure><p>那么，如何理解呢，让我们来看段代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logParameter</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span></span>) </span>&#123;<br>    <span class="hljs-comment">// 属性值</span><br>    <span class="hljs-keyword">let</span> _val = <span class="hljs-built_in">this</span>[propertyName];<br><br>    <span class="hljs-comment">// 属性读取访问器</span><br>    <span class="hljs-keyword">const</span> getter = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Get: <span class="hljs-subst">$&#123;propertyName&#125;</span> =&gt; <span class="hljs-subst">$&#123;_val&#125;</span>`</span>);<br>        <span class="hljs-keyword">return</span> _val;<br>    &#125;;<br><br>    <span class="hljs-comment">// 属性写入访问器</span><br>    <span class="hljs-keyword">const</span> setter = <span class="hljs-function"><span class="hljs-params">newVal</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Set: <span class="hljs-subst">$&#123;propertyName&#125;</span> =&gt; <span class="hljs-subst">$&#123;newVal&#125;</span>`</span>);<br>        _val = newVal;<br>    &#125;;<br><br>    <span class="hljs-comment">// 删除属性</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>[propertyName]) &#123;<br>        <span class="hljs-comment">// 创建新属性及其读取访问器、写入访问器</span><br>        <span class="hljs-built_in">Object</span>.defineProperty(target, propertyName, &#123;<br>            <span class="hljs-attr">get</span>: getter,<br>            <span class="hljs-attr">set</span>: setter,<br>            <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>    <span class="hljs-meta">@logParameter</span><br>    <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> greeter = <span class="hljs-keyword">new</span> Greeter();<br>greeter.greeting = <span class="hljs-string">&#x27;Jerome&#x27;</span>;<br>greeter.greeting<br></code></pre></td></tr></table></figure><p>运行这段代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/prototype.js</span> <br>Set: greeting =&gt; Jerome<br>Get: greeting =&gt; Jerome<br></code></pre></td></tr></table></figure><p>从结果可知，在实例中使用了 getter 和 setter 方法之后，都会打印出相应的 log，即装饰器的表达式在运行的时候被调用了。</p><p>让我们来看看编译成 js 之后的 Greeter 类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Greeter = <span class="hljs-comment">/** <span class="hljs-doctag">@class </span>*/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Greeter</span>(<span class="hljs-params"></span>) </span>&#123;<br>    &#125;<br>    __decorate([<br>        logParameter,<br>        __metadata(<span class="hljs-string">&quot;design:type&quot;</span>, <span class="hljs-built_in">String</span>)<br>    ], Greeter.prototype, <span class="hljs-string">&quot;greeting&quot;</span>, <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> Greeter;<br>&#125;());<br></code></pre></td></tr></table></figure><p>由此可见，此次 __decorate 函数传入了 4 个参数，由在类装饰器分析的 _decorate 函数可知：</p><p>​ 从右往左运行装饰器，先运行__metadata(“design:type”, String) 表示被装饰的参数 greeting 是 String 类型，再运行 logParameter 装饰器，改写 greeting 参数的 getter 和 setter 方法。</p><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>方法装饰器声明在一个方法的声明之前（紧靠着方法声明）。 它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。</p><p>方法装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p><p>target：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</p><p>propertyKey：成员的名字。</p><p>descriptor：成员的属性描述符。</p><p>同样地，让我们来看段代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logMethod</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    target: <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    propertyName: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    propertyDescriptor: PropertyDescriptor</span>): <span class="hljs-title">PropertyDescriptor</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> method = propertyDescriptor.value;<br><br>    propertyDescriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>) </span>&#123;<br>        <span class="hljs-comment">// 将 greet 的参数列表转换为字符串</span><br>        <span class="hljs-keyword">const</span> params = args.map(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> <span class="hljs-built_in">JSON</span>.stringify(a)).join();<br>        <span class="hljs-comment">// 调用 greet() 并获取其返回值</span><br>        <span class="hljs-keyword">const</span> result = method.apply(<span class="hljs-built_in">this</span>, args);<br>        <span class="hljs-comment">// 转换结尾为字符串</span><br>        <span class="hljs-keyword">const</span> r = <span class="hljs-built_in">JSON</span>.stringify(result);<br>        <span class="hljs-comment">// 在终端显示函数调用细节</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Call: <span class="hljs-subst">$&#123;propertyName&#125;</span>(<span class="hljs-subst">$&#123;params&#125;</span>) =&gt; <span class="hljs-subst">$&#123;r&#125;</span>`</span>);<br>        <span class="hljs-comment">// 返回调用函数的结果</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">return</span> propertyDescriptor;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> name: <span class="hljs-built_in">string</span></span>)</span> &#123; &#125;<br><br>    <span class="hljs-meta">@logMethod</span><br>    greet(message: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> says: <span class="hljs-subst">$&#123;message&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> greeter = <span class="hljs-keyword">new</span> Greeter(<span class="hljs-string">&#x27;Jerome&#x27;</span>);<br>greeter.greet(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行这段代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/method.js</span> <br>Call: greet(&quot;Hello&quot;) =&gt; &quot;Jerome says: Hello&quot;<br></code></pre></td></tr></table></figure><p>由打印结果可知，logMethod 这个方法装饰器在运行时当作了函数被调用。该函数有利于内审方法的调用，符合面向切面编程的思想。</p><p>让我们来看看编译成 js 之后的 Greeter 类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Greeter = <span class="hljs-comment">/** <span class="hljs-doctag">@class </span>*/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Greeter</span>(<span class="hljs-params">name</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    Greeter.prototype.greet = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; says: &quot;</span> + message;<br>    &#125;;<br>    __decorate([<br>        logMethod,<br>        __metadata(<span class="hljs-string">&quot;design:type&quot;</span>, <span class="hljs-built_in">Function</span>),<br>        __metadata(<span class="hljs-string">&quot;design:paramtypes&quot;</span>, [<span class="hljs-built_in">String</span>]),<br>        __metadata(<span class="hljs-string">&quot;design:returntype&quot;</span>, <span class="hljs-built_in">String</span>)<br>    ], Greeter.prototype, <span class="hljs-string">&quot;greet&quot;</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> Greeter;<br>&#125;());<br></code></pre></td></tr></table></figure><p>由此可见，此次 __decorate 函数传入了 4 个参数，由在类装饰器分析的 _decorate 函数可知：</p><p>​ 从右往左运行装饰器，先运行__metadata(“design:returntype”, String) 表示被装饰的方法 greet 的返回值的属性是 String 类型， __metadata(“design:paramtypes”, [String]) 表示方法参数的类型是 String，__metadata(“design:type”, Function)表示被装饰的是函数类型，再运行 logMethod 装饰器，打印出了函数调用的细节。</p><h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><p>参数装饰器声明在一个参数声明之前（紧靠着参数声明）。 参数装饰器应用于类构造函数或方法声明。</p><p>参数装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p><p>target：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</p><p>propertyKey：成员的名字。</p><p>index：参数在函数参数列表中的索引。</p><p>同样地，让我们来看一段代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logParameter</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span>, index: <span class="hljs-built_in">number</span></span>) </span>&#123;<br>    <span class="hljs-comment">// 为相应方法生成元数据键，以储存被装饰的参数的位置</span><br>    <span class="hljs-keyword">const</span> metadataKey = <span class="hljs-string">`log_<span class="hljs-subst">$&#123;propertyName&#125;</span>_parameters`</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target[metadataKey])) &#123;<br>        target[metadataKey].push(index);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        target[metadataKey] = [index];<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;target =&gt; &#x27;</span>, target)<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>    greet(<span class="hljs-meta">@logParameter</span> message: <span class="hljs-built_in">string</span>, <span class="hljs-attr">middle</span>:<span class="hljs-built_in">string</span>, <span class="hljs-meta">@logParameter</span> name: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span> : <span class="hljs-subst">$&#123;message&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> greeter = <span class="hljs-keyword">new</span> Greeter();<br>greeter.greet(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;I am middle&#x27;</span>, <span class="hljs-string">&#x27;jerome&#x27;</span>);<br></code></pre></td></tr></table></figure><p>运行打包之后的 js：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/parameter.js</span> <br>target =&gt;  Greeter &#123; greet: [Function], log_greet_parameters: [ 2 ] &#125;<br>target =&gt;  Greeter &#123; greet: [Function], log_greet_parameters: [ 2, 0 ] &#125;<br></code></pre></td></tr></table></figure><p>可以看到，打印了两个 log，message 和 name 的位置分别是 0 和 2。</p><p>让我们来看看编译成 js 之后的 Greeter 类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> Greeter = <span class="hljs-comment">/** <span class="hljs-doctag">@class </span>*/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Greeter</span>(<span class="hljs-params"></span>) </span>&#123;<br>    &#125;<br>    Greeter.prototype.greet = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message, middle, name</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; : &quot;</span> + message;<br>    &#125;;<br>    __decorate([<br>        __param(<span class="hljs-number">0</span>, logParameter), __param(<span class="hljs-number">2</span>, logParameter),<br>        __metadata(<span class="hljs-string">&quot;design:type&quot;</span>, <span class="hljs-built_in">Function</span>),<br>        __metadata(<span class="hljs-string">&quot;design:paramtypes&quot;</span>, [<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>]),<br>        __metadata(<span class="hljs-string">&quot;design:returntype&quot;</span>, <span class="hljs-built_in">String</span>)<br>    ], Greeter.prototype, <span class="hljs-string">&quot;greet&quot;</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> Greeter;<br>&#125;());<br></code></pre></td></tr></table></figure><p>​ 由此可见，此次 _decorate 函数也传入 4 个参数，注意第 4 个参数为 null，这在 _decorate 函数中会使 r 的值有所不同。由前面可知，装饰器从右往左运行，依次确定被装饰对象的返回值类型，参数类型以及自身的类型为 Function，这里有个不一样的 __param() 装饰器，让我们也来了解一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> __param = (<span class="hljs-built_in">this</span> &amp;&amp; <span class="hljs-built_in">this</span>.__param) || <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">paramIndex, decorator</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, key</span>) </span>&#123;<br>        decorator(target, key, paramIndex);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可见，他调用了 logParameter 函数，并传入了一个 paramIndex 表示参数的位置。由此，参数装饰器也一目了然了。</p><p>访问器装饰器<br>访问器装饰器应用于访问器的属性描述符，可用于观测、修改、替换访问器的定义。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">enumerable</span>(<span class="hljs-params">value: <span class="hljs-built_in">boolean</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">        target: <span class="hljs-built_in">any</span>, propertyKey: <span class="hljs-built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;decorator - sets the enumeration part of the accessor&#x27;</span>);<br>        descriptor.enumerable = value;<br>    &#125;;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> _age: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">private</span> _name: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;jerome&#x27;</span>;<br><br>    <span class="hljs-meta">@enumerable</span>(<span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">age</span>() &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._age; &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title">age</span>(<span class="hljs-params">age: <span class="hljs-built_in">any</span></span>) &#123; <span class="hljs-built_in">this</span>._age = age; &#125;<br><br>    <span class="hljs-meta">@enumerable</span>(<span class="hljs-literal">true</span>)<br>    <span class="hljs-keyword">get</span> <span class="hljs-title">name</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._name;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-built_in">this</span>._name = name;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> person) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`enumerable property = <span class="hljs-subst">$&#123;prop&#125;</span>`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行之后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/defineObject.js</span> <br>decorator - sets the enumeration part of the accessor<br>decorator - sets the enumeration part of the accessor<br>enumerable property = _age<br>enumerable property = _name<br>enumerable property = name<br></code></pre></td></tr></table></figure><p>上面的例子中，我们定义了两个访问器 name 和 age ，并通过装饰器设置是否将其列入可枚举属性，我们把 age 设置为false， 所以在清单中不会出现 age。</p><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>Reflect Metadata是 ES7 的一个提案，它主要用来在声明的时候添加和读取元数据。</p><p>可以通过 npm 安装这个库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i reflect-metadata --save<br></code></pre></td></tr></table></figure><p>TypeScript 支持为带有装饰器的声明生成元数据。 你需要在命令行或 tsconfig.json 里启用 emitDecoratorMetadata 编译器选项。</p><p>命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tsc --target ES5 --experimentalDecorators --emitDecoratorMetadata<br></code></pre></td></tr></table></figure><p>tsconfig.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES5&quot;</span>,<br>        <span class="hljs-attr">&quot;experimentalDecorators&quot;</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">&quot;emitDecoratorMetadata&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当启用后，只要 reflect-metadata 库被引入了，设计阶段添加的类型信息可以在运行时使用。元信息反射 API 能够用来以标准方式组织元信息。「反射」的意思是代码可以侦测同一系统中的其他代码（或其自身）。反射在组合/依赖注入、运行时类型断言、测试等使用场景下很有用。</p><p>在这里，我们能够使用之前学过的各类装饰器来修饰你的代码。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;reflect-metadata&quot;</span>;<br><br><span class="hljs-comment">// 【参数装饰器】用来存储被装饰参数的索引</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logParameter</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span>, index: <span class="hljs-built_in">number</span></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> indices = <span class="hljs-built_in">Reflect</span>.getMetadata(<span class="hljs-string">`log_<span class="hljs-subst">$&#123;propertyName&#125;</span>_parameters`</span>, target, propertyName) || [];<br>    indices.push(index);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;indices =&gt; &#x27;</span>, indices);<br>    <span class="hljs-built_in">Reflect</span>.defineMetadata(<span class="hljs-string">`log_<span class="hljs-subst">$&#123;propertyName&#125;</span>_parameters`</span>, indices, target, propertyName);<br>&#125;<br><br><span class="hljs-comment">// 【属性装饰器】用来获取属性的运行时类型</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logProperty</span>(<span class="hljs-params">target: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">void</span> </span>&#123;<br>    <span class="hljs-comment">// 获取对象属性的设计类型</span><br>    <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">Reflect</span>.getMetadata(<span class="hljs-string">&quot;design:type&quot;</span>, target, propertyName);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;propertyName&#125;</span> type: <span class="hljs-subst">$&#123;t.name&#125;</span>`</span>);<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>    <span class="hljs-meta">@logProperty</span><br>    <span class="hljs-keyword">private</span> name: <span class="hljs-built_in">string</span>;<br>    <br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    greet(<span class="hljs-meta">@logParameter</span> message: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> says: <span class="hljs-subst">$&#123;message&#125;</span>`</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> greeter = <span class="hljs-keyword">new</span> Greeter(<span class="hljs-string">&#x27;jerome&#x27;</span>);<br>greeter.greet(<span class="hljs-string">&#x27;hello&#x27;</span>);<br></code></pre></td></tr></table></figure><p>design:type 表示被装饰的对象是什么类型<br>design:paramtypes 表示被装饰对象的参数类型<br>design:returntype 表示被装饰对象的返回值属性</p><p>运行这段代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node decorator/reflect-metadata.js</span> <br>name type: String<br>indices =&gt;  [ 0 ]<br></code></pre></td></tr></table></figure><p>打印出了我们想知道的 name 的类型以及 message 的参数索引。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>typescript 的装饰器本质上提供了被装饰对象 Property Descriptor 的操作，都是在运行的时候被当作函数调用。看了这篇文章，是否觉得 typescript 这个装饰器的特性有点像 java spring 中注解的写法，我们可以利用我们写的装饰器来实现反射、依赖注入，类型断言等，实现在运行中程序对自身进行检查，vscode 就是典型的利用 typescript 的装饰器实现了依赖注入，有兴趣的请关注后续的文章。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>装饰器是扩展 JavaScript 类的建议，TC39 五年来一直在研究装饰方案，有兴趣的可以关注下 TC39 的这个<a href="https://github.com/tc39/proposal-decorators">提案</a>，babel 也实现了该提案，<a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators">具体可查</a>。</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/2021/06/27/prototype/"/>
    <url>/2021/06/27/prototype/</url>
    
    <content type="html"><![CDATA[<h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>在我们创建的一个函数时，都有一个 prototype（原型）属性，这个属性是一个<strong>指针</strong>，指向<strong>原型对象</strong>，并且所有的原型对象都会自动获得一个 constructor ，下面我们先定义一个函数，并把所有的属性和方法都挂载在函数的 prototype 属性下，并新建两个对象实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br>Person.prototype.name = <span class="hljs-string">&#x27;jerome&#x27;</span><br>Person.prototype.age = <span class="hljs-number">18</span><br>Person.prototype.job = <span class="hljs-string">&#x27;Front End Engineer&#x27;</span><br>Person.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alter(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person()<br></code></pre></td></tr></table></figure><p>那么，代码中实际上 Person 构造函数、Person 的原型属性以及 Person 现有的两个实例间的关系是怎么样的呢，让我们看下图：</p><p><img src="https://img-blog.csdnimg.cn/20210503234607875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcm9tZV83Nzc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>从图中我们可以看到，Person 的 prototype 属性指向了 Person 的原型对象，而原型对象中的 constructor 又指回了 Peron。并且在 Person 的原型下，还有我们定义的属性和方法。再看创建的两个实例，每个实例都有一个内部属性 [[prototype]]（__proto__） 指向了原型对象。</p><h3 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h3><p>由于原型模式省略了为构造函数初始化参数这一环节，默认情况下所有的实例都会取得相同的属性值，在一定程度上造成了不便。但是，还有一个更大的问题，是由其共享的本性所导致的，在属性有引用类型的时候，这个问题就比较突出了，让我们看下下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-attr">constrcutor</span>: Person,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jerome&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;Front End Engineer&#x27;</span>,<br>    <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;shy&#x27;</span>, <span class="hljs-string">&#x27;faker&#x27;</span>],<br>    <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alter(<span class="hljs-built_in">this</span>.name)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person()<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person()<br><br>person1.friends.push(<span class="hljs-string">&#x27;rookie&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(person1.friends)    <span class="hljs-comment">// &quot;shy,faker,rookie&quot;</span><br><span class="hljs-built_in">console</span>.log(person2.friends)    <span class="hljs-comment">// &quot;shy,faker,rookie&quot;</span><br><span class="hljs-built_in">console</span>.log(person1.friends === person2.friends)    <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>当原型对象中有引用类型的值时，修改引用类型的值，由于他是一个引用（指针），会修改所有实例的这个属性的值，就如上代码，在 person1.friends 增加一个值之后，person1 和 person2 的 friends 都被修改了。</p><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p>由于在使用原型模式时有引用类型会造成的问题，那么可以结合构造函数和原型模式来使用。这个方法我总结了一句话：属性使用构造函数模式（不共享），方法使用原型模式（共享）。让我们来看下下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, job</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>    <span class="hljs-built_in">this</span>.job = job<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&#x27;shy&#x27;</span>, <span class="hljs-string">&#x27;faker&#x27;</span>]<br>&#125;<br><br>Person.prototype = &#123;<br>    <span class="hljs-attr">constrcutor</span>: Person,<br>    <span class="hljs-attr">sayName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        alter(<span class="hljs-built_in">this</span>.name)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;jerome&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;Front End Engineer&#x27;</span>)<br><span class="hljs-keyword">const</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;the shy&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;gamer&#x27;</span>)<br><br>person1.friends.push(<span class="hljs-string">&#x27;rookie&#x27;</span>)<br><br><span class="hljs-built_in">console</span>.log(person1.friends)    <span class="hljs-comment">// &quot;shy,faker,rookie&quot;</span><br><span class="hljs-built_in">console</span>.log(person2.friends)    <span class="hljs-comment">// &quot;shy,faker&quot;</span><br><span class="hljs-built_in">console</span>.log(person1.friends === person2.friends)    <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>可以看到，两个实例的 friends 已经不共享了。</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链的基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.property = <span class="hljs-literal">true</span><br>&#125;<br><br>SuperType.prototype.getSuperValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.property<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.subproperty = <span class="hljs-literal">false</span><br>&#125;<br><br>SubType.prototype = <span class="hljs-keyword">new</span> SuperType()<br><br>SubType.property.getSubValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.subproperty<br>&#125;<br><br><span class="hljs-keyword">const</span> instance = <span class="hljs-keyword">new</span> SubType()<br><span class="hljs-built_in">console</span>.log(instance.getSuperValue())   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>我们可以看到，instance 是 SubType 对象，却可以使用 SuperType 的方法，这就是继承了 SuperType ，而继承的实现就是通过创建父函数的实例，并将该实例赋值给子函数的 prototype 实现的。实现的本质是重写原型对象，代之以一个新类型的实例。让我们来看下他们之间的关系：</p><p><img src="https://img-blog.csdnimg.cn/20210503234623313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcm9tZV83Nzc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在上面代码中，我们没有使用 SubType 默认的原型对象，而是使用了 SuperType 的实例当作他的原型。这个原型含有 SuperType 所有的属性和方法。从之前原型对象的知识点可知，实例的内部还有一个指针（[[prototype]]），指向原型，这里相当于是 SubType 的原型对象指向了 SuperType 的原型，这样就实现了继承。</p><h3 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h3><p>同样的，原型链也含有引用类型的问题，那么，接下来我将介绍一下如何解决这个问题。</p><h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><p>这个方法的基本思想就是在子类型构造函数的内部通过 call 或者 apply 调用超类型构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&#x27;the shy&#x27;</span>, <span class="hljs-string">&#x27;faker&#x27;</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params"></span>) </span>&#123;<br>    SuperType.call(<span class="hljs-built_in">this</span>, <span class="hljs-string">&#x27;jerome&#x27;</span>)<br>    <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">const</span> instance1 = <span class="hljs-keyword">new</span> SubType()<br>instance1.friends.push(<span class="hljs-string">&#x27;rookie&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(instance1.friends)   <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27;, &#x27;rookie&#x27; ]</span><br><span class="hljs-built_in">console</span>.log(instance1.name)      <span class="hljs-comment">// jerome</span><br><br><span class="hljs-keyword">const</span> instance2 = <span class="hljs-keyword">new</span> SubType()<br><span class="hljs-built_in">console</span>.log(instance2.friends)   <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27; ]</span><br></code></pre></td></tr></table></figure><p>但这个方法存在一个问题，方法都在构造函数中定义，函数复用也无从说起，这个方法很少单独使用。</p><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>组合继承，就是将原型链和借用构造函数的技术组合到一起。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&#x27;the shy&#x27;</span>, <span class="hljs-string">&#x27;faker&#x27;</span>]<br>&#125;<br><br>SuperType.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    SuperType.call(<span class="hljs-built_in">this</span>, name)<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><br><span class="hljs-comment">// 继承方法</span><br>SubType.prototype = <span class="hljs-keyword">new</span> SuperType()<br>SubType.prototype.constructor = SubType<br>SubType.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age)<br>&#125;<br><br><span class="hljs-keyword">const</span> instance1 = <span class="hljs-keyword">new</span> SubType(<span class="hljs-string">&#x27;jerome&#x27;</span>, <span class="hljs-number">18</span>)<br>instance1.friends.push(<span class="hljs-string">&#x27;rookie&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(instance1.friends)  <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27;, &#x27;rookie&#x27; ]</span><br>instance1.sayName() <span class="hljs-comment">// jerome</span><br>instance1.sayAge()  <span class="hljs-comment">// 18</span><br><br><span class="hljs-keyword">const</span> instance2 = <span class="hljs-keyword">new</span> SubType(<span class="hljs-string">&#x27;the shy&#x27;</span>, <span class="hljs-number">19</span>)<br><span class="hljs-built_in">console</span>.log(instance2.friends)  <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27; ]</span><br>instance2.sayName() <span class="hljs-comment">// the shy</span><br>instance2.sayAge()  <span class="hljs-comment">// 19</span><br></code></pre></td></tr></table></figure><p>在这个例子中，可以看到 SubType 继承了 SuperType 的属性和方法，又有自己的属性和方法，并且 friends 属性是相互独立的，避免了原型链（引用类型问题）和借用构造函数（方法无法复用）的缺陷，但组合继承也有缺点，我们后续会说到。</p><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><p>原型式继承，就是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。可以利用 Object.create() 来实现，这个方法接收两个参数：一个用作新对象原型的对象和一个为新对象定义额外属性的对象（可选）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jerome&#x27;</span>,<br>    <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;the shy&#x27;</span>, <span class="hljs-string">&#x27;faker&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">const</span> anotherPerson = <span class="hljs-built_in">Object</span>.create(person, &#123;<br>    <span class="hljs-attr">name</span>: &#123;<br>        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;rookie&#x27;</span><br>    &#125;<br>&#125;)<br><br>anotherPerson.friends.push(<span class="hljs-string">&#x27;zoom&#x27;</span>)  <br><span class="hljs-built_in">console</span>.log(anotherPerson.name)     <span class="hljs-comment">// rookie</span><br><span class="hljs-built_in">console</span>.log(person.friends)     <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27;, &#x27;zoom&#x27; ]</span><br><span class="hljs-built_in">console</span>.log(anotherPerson.friends)  <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27;, &#x27;zoom&#x27; ]</span><br></code></pre></td></tr></table></figure><p>可以看到，原型式继承还有引用类型的问题</p><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p>寄生式继承，就是创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createAnother</span>(<span class="hljs-params">original</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> clone = <span class="hljs-built_in">Object</span>.create(original)<br>    clone.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> clone<br>&#125;<br></code></pre></td></tr></table></figure><p>在例子中，该函数为源对象增加了一个 sayHi 的方法，和原型式继承类似。</p><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p>从前面看，组合式继承似乎就是最好最常用的继承方式，不过，它也有自己的不足，组合式继承无论在什么情况下，都会调用两次超类型的构造函数，第一次是在 new SuperType() 的时候，第二次是在调用 SuperType.call 的时候。</p><p>寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 相当于 subType 的原型对象不直接 new 出来，而是从 Object 继承下来</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> prototype = <span class="hljs-built_in">Object</span>.create(superType.prototype)<br>    prototype.constructor = subType<span class="hljs-comment">// constructor 指回构造函数</span><br>    subType.prototype = prototype<span class="hljs-comment">// prototype 指向原型对象</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SuperType</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.friends = [<span class="hljs-string">&#x27;the shy&#x27;</span>, <span class="hljs-string">&#x27;faker&#x27;</span>]<br>&#125;<br><br>SuperType.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubType</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    SuperType.call(<span class="hljs-built_in">this</span>, name)<br>    <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><br>inheritPrototype(SubType, SuperType)<br><br>SubType.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age)<br>&#125;<br><br><span class="hljs-keyword">const</span> instance1 = <span class="hljs-keyword">new</span> SubType(<span class="hljs-string">&#x27;jerome&#x27;</span>, <span class="hljs-number">18</span>)<br>instance1.friends.push(<span class="hljs-string">&#x27;zoom&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(instance1.friends)  <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27;, &#x27;chen&#x27; ]</span><br>instance1.sayName() <span class="hljs-comment">// jerome</span><br>instance1.sayAge()  <span class="hljs-comment">// 18</span><br><br><br><span class="hljs-keyword">const</span> instance2 = <span class="hljs-keyword">new</span> SubType(<span class="hljs-string">&#x27;rookie&#x27;</span>, <span class="hljs-number">19</span>)<br><span class="hljs-built_in">console</span>.log(instance2.friends)  <span class="hljs-comment">// [ &#x27;the shy&#x27;, &#x27;faker&#x27; ]</span><br>instance2.sayName() <span class="hljs-comment">// rookie</span><br>instance2.sayAge()  <span class="hljs-comment">//19</span><br></code></pre></td></tr></table></figure><p>这个例子的高效率提现在它只调用了一次超类型的构造函数，避免在 SubType.prototype 上创建不必要的、多余的属性。与此同时，原型链还能保持不变，寄生组合继承是引用类型最理想的继承范式。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
